<?php

namespace App\Exceptions;

use App\Http\Response;
use Illuminate\Database\Eloquent\ModelNotFoundException;
use Illuminate\Database\QueryException;
use Illuminate\Http\Response as LaravelResponse;
use Illuminate\Auth\AuthenticationException;
use Illuminate\Foundation\Exceptions\Handler as ExceptionHandler;
use Illuminate\Support\Facades\Config;
use Illuminate\Validation\ValidationException;
use Symfony\Component\HttpKernel\Exception\HttpException;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
use Throwable;

class Handler extends ExceptionHandler
{
    protected $allowEnvReport = [
        'local',
        'staging'
    ];

    /**
     * A list of the exception types that are not reported.
     *
     * @var string[]
     */
    protected $dontReport = [
        //
    ];

    /**
     * A list of the inputs that are never flashed for validation exceptions.
     *
     * @var string[]
     */
    protected $dontFlash = [
        'current_password',
        'password',
        'password_confirmation',
    ];

    /**
     * Register the exception handling callbacks for the application.
     *
     * @return void
     */
    public function register()
    {
        $this->reportable(function (Throwable $e) {
            //
        });
    }

    /**
     * @param \Illuminate\Http\Request $request
     * @param Throwable $e
     * @return \Illuminate\Http\JsonResponse|\Illuminate\Http\Response|\Symfony\Component\HttpFoundation\Response
     * @throws Throwable
     */
    public function render($request, Throwable $e)
    {
        if (in_array(\config('app.env'),$this->allowEnvReport)){
            $data = [
                'message' => $e->getMessage()
            ];
        }else{
            $data = [];
        }

        if ($request->expectsJson()){
            switch (true){
                case $e instanceof QueryException:
                    /** @var QueryException $e */
                    $e = Error::make(Response::CODE_ERROR,$data);
                    break;
                case $e instanceof ValidationException:
                    $e = Error::make(Response::CODE_ERROR_INVALID_DATA,$e->errors());
                    break;
                case $e instanceof AuthenticationException:
                    $e = Error::make(Response::CODE_ERROR_UNAUTHENTICATED,$data);
                    break;
                case $e instanceof ModelNotFoundException:
                    $e = Error::make(Response::CODE_ERROR_RESOURCE_NOT_FOUND,$data,$e);
                    break;
                case $e instanceof \ArgumentCountError:
                    $e = Error::make(Response::CODE_ERROR,$data);
                    break;
                case $e instanceof HttpException:
                    switch ($e->getStatusCode()){
                        case LaravelResponse::HTTP_NOT_FOUND:
                            $e = Error::make(Response::CODE_ERROR_ROUTE_NOT_FOUND,$data);
                            break;
                        case LaravelResponse::HTTP_UNAUTHORIZED:
                            $e = Error::make(Response::CODE_ERROR_UNAUTHENTICATED,$data);
                            break;
                        case LaravelResponse::HTTP_FORBIDDEN:
                            $e = Error::make(Response::CODE_ERROR_UNAUTHORIZED,$data);
                            break;
                    }
            }
        }
        return parent::render($request, $e); // TODO: Change the autogenerated stub
    }
}
